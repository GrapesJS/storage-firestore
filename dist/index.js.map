{"version":3,"file":"index.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAQ,sBAAwBD,IAEhCD,EAAK,sBAAwBC,IAR/B,CASyB,oBAAfK,WAA6BA,WAAgC,oBAAXC,OAAyBA,OAASC,MAAO,I,mBCRrG,IAAIC,EAAsB,CCA1BA,EAAwB,CAACP,EAASQ,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAEV,EAASS,IAC5EE,OAAOC,eAAeZ,EAASS,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBP,IACH,oBAAXoB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeZ,EAASoB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeZ,EAAS,aAAc,CAAEsB,OAAO,M,qqDCkHvD,QAnE+C,SAACC,EAAQC,GACtD,IAYIC,EACAC,EACAC,EAdEC,EAAO,GACXC,KAAM,YACNC,MAAO,MACPC,eAAgB,WAChBC,eAAe,EACfC,SAAU,IACPT,GAGCU,EAAKX,EAAOY,eACZC,EAAcR,EAAQC,KAKxBC,EAAQN,EAAKM,MAEXO,EAAY,qD,kDAChB,OAAIX,EAAe,CAAP,EAAOA,GAEdD,EAAD,OACFa,SAASC,cAAc,CACrBC,OAAQZ,EAAQY,OAChBC,WAAYb,EAAQa,WACpBC,UAAWd,EAAQc,aAGrBjB,EAAQa,SAASK,aACXV,SAASL,EAAQK,UAEnBT,EAAKQ,cACP,GAAMP,EAAMmB,qBADV,O,OACF,S,iBASJ,OALKjB,IACHA,EAAgBF,EAAMoB,WAAWrB,EAAKO,iBAIjC,CAAP,EADAL,EAASC,EAAcmB,IAAIhB,YAI7BI,EAAGa,IAAIX,EAAa,CACZY,KAAN,W,gGACc,SAAMX,K,OACH,SADH,SACavB,O,OACzB,MAAO,CAAP,GADMmC,EAAS,UACAC,OAASD,EAAOE,OAAS,YAGpCC,MAAK,SAACD,G,0FACE,SAAMd,K,OAClB,SADY,SACFgB,IAAIF,I,cAAd,S,YAGFG,OAAQ,WAAM,OAAA5B,GAEd6B,SAAU,WAAM,OAAAzB,GAEhB0B,SAAA,SAASC,GACP3B,EAAQ2B,EACR/B,EAASC,EAAcmB,IAAIhB,O","sources":["webpack://grapesjs-firestore/webpack/universalModuleDefinition","webpack://grapesjs-firestore/webpack/bootstrap","webpack://grapesjs-firestore/webpack/runtime/define property getters","webpack://grapesjs-firestore/webpack/runtime/hasOwnProperty shorthand","webpack://grapesjs-firestore/webpack/runtime/make namespace object","webpack://grapesjs-firestore/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grapesjs-firestore\"] = factory();\n\telse\n\t\troot[\"grapesjs-firestore\"] = factory();\n})(typeof globalThis !== 'undefined' ? globalThis : (typeof window !== 'undefined' ? window : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type grapesjs from 'grapesjs';\nimport type Firebase from 'firebase';\n\ndeclare const firebase: typeof Firebase;\n\nexport type PluginOptions = {\n  /**\n   * Type id used to register the new storage.\n   * You can use this option in case you want to replace the already available storages (eg. `remote`).\n   * @default 'firestore'\n   */\n  type?: string,\n\n  /**\n   * Firebase API key\n   */\n   apiKey: string,\n\n   /**\n    * Firebase Auth domain\n    */\n   authDomain: string,\n\n   /**\n    * Cloud Firestore project ID\n    */\n   projectId: string,\n\n   /**\n    * Document id\n    * @default 'gjs'\n    */\n   docId?: string,\n\n   /**\n    * Collection name\n    * @default 'projects'\n    */\n   collectionName?: string,\n\n   /**\n    * Enable support for offline data persistence\n    * @default true\n    */\n   enableOffline?: boolean,\n\n   /**\n    * Firestore settings (https://firebase.google.com/docs/reference/js/firebase.firestore.Settings)\n    */\n   settings?: Firebase.firestore.Settings,\n};\n\nconst plugin: grapesjs.Plugin<PluginOptions> = (editor, opts) => {\n  const options: PluginOptions = {\n    type: 'firestore',\n    docId: 'gjs',\n    collectionName: 'projects',\n    enableOffline: true,\n    settings: {},\n    ...opts,\n  };\n\n  const sm = editor.StorageManager;\n  const storageName = options.type!;\n\n  let dbRef: Firebase.firestore.Firestore;\n  let docRef: Firebase.firestore.DocumentReference<Firebase.firestore.DocumentData>;\n  let collectionRef: Firebase.firestore.CollectionReference<Firebase.firestore.DocumentData>;\n  let docId = opts.docId!;\n\n  const getDocRef = async () => {\n    if (docRef) return docRef;\n\n    if (!dbRef) {\n      firebase.initializeApp({\n        apiKey: options.apiKey,\n        authDomain: options.authDomain,\n        projectId: options.projectId,\n      });\n\n      dbRef = firebase.firestore();\n      dbRef.settings(options.settings!);\n\n      if (opts.enableOffline) {\n        await dbRef.enablePersistence();\n      }\n    }\n\n    if (!collectionRef) {\n      collectionRef = dbRef.collection(opts.collectionName!);\n    }\n\n    docRef = collectionRef.doc(docId);\n    return docRef;\n  }\n\n  sm.add(storageName, {\n    async load() {\n      const doc = await getDocRef();\n      const result = await doc.get();\n      return (result.exists ? result.data() : {}) as grapesjs.ProjectData;\n    },\n\n    async store(data) {\n      const doc = await getDocRef();\n      await doc.set(data);\n    },\n\n    getDoc: () => docRef,\n\n    getDocId: () => docId,\n\n    setDocId(id: string) {\n      docId = id;\n      docRef = collectionRef.doc(docId);\n    },\n  });\n};\n\nexport default plugin;\n"],"names":["root","factory","exports","module","define","amd","globalThis","window","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","editor","opts","dbRef","docRef","collectionRef","options","type","docId","collectionName","enableOffline","settings","sm","StorageManager","storageName","getDocRef","firebase","initializeApp","apiKey","authDomain","projectId","firestore","enablePersistence","collection","doc","add","load","result","exists","data","store","set","getDoc","getDocId","setDocId","id"],"sourceRoot":""}